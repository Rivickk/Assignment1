1. Sound analysis is useful for preventing false positives, but can not guarentee false negatives; Sound analysis will detect any bug that it finds, guaranteeing there is a bug. Complete analysis will find all bugs that exist in the software, which is also useful for preventing false negatives, but also does not guarantee false positives. True positive is when a tool reports a true vulnerability, false positive is when a tool reports a vulnerability where there is not one. A false negative is when the tool would not report a vulnerability that does exist, and a true negative is when the tool reports a vulnerability that does exist. If positive refers to finding a bug, and negative refers to not finding a bug, then a true positive would be finding a bug, a false positive would be finding a bug where there is not a bug. A false negative would be not finding a bug where there is a bug, and a true negative would be not finding a bug where there is a bug.

2A) See github
2B) This program is an insertion sort algroithm, which will seemingly work with the given unsortedArray, but given enough random attempts, the bug will be obvious as the output from the random test case generator, that generates a random length, and random integers, will eventually end up with two separate sorted lists within one. This is due to the if statement "if compare >= 0:", this is fundamentally wrong as it should be compared against the element size in the while loop, causing integers that are too large to bypass the if statement and reach the else statement, creating a new list and sorting from there, until potentially done again, or the loop finishes.

3A) See github
3B) Create random strings, generated on a random length using randint. Using a 1/3, generate if a string will be an exception, and append to exception list upon creating the random string. Then just provide numbers that would be able to proc all results and edge cases if ran enough and feed them into the function such that they would occur.

4A) The first distinct test case would be checking up to exceptions which would be 71% coverage and condition coverage, The second distinct test would be modifiying the code to only contain testing the limit, which would be 71% coverage and also condition coverage, The third distinct test would be confining the test to multiplying the item by two, with as well 71% cod coverage and condition coverage. The fourth distinct test would be just appending filtered_data, which would be 57% code coverage and basic block coverage.

4B) 1. def filterData(data, limit, exceptions):   Variable Mutation
 	filtered_data = []
 	index = 0
 	while index < len(data):
 	item = data[index]
 	if item in exceptions:
 	modified_item = item + "_EXCEPTION
 	elif item > limit:
 	modified_item = item * 2
 	else:
 	modified_item = item / limit
 	filtered_data.append(modified_item)
 	index += 0 (CHANGED)
 	return filtered_data

    2. def filterData(data, limit, exceptions): Method Call Mutation
 	filtered_data = []
 	index = 0
 	while index < len(data):
 	item = data[index]
 	if item in exceptions:
 	modified_item = item + "_EXCEPTION
 	elif item > limit:
 	modified_item = item * 2
 	else:
 	modified_item = item / limit
 	filtered_data.append(item) (CHANGED)
 	index += 1
 	return filtered_data

   3. def filterData(data, limit, exceptions): Method Call Mutation
 	filtered_data = []
 	index = 0
 	while index < len(data):
 	item = data[index]
 	if item in exceptions:
 	modified_item = item + "_EXCEPTION
 	elif item > limit:
 	modified_item = item * 2
 	else:
 	modified_item = item / limit
 	filtered_data.pop(modified_item) (CHANGED)
 	index += 1
 	return filtered_data

   4. def filterData(data, limit, exceptions): Arithmetic Mutation
 	filtered_data = []
 	index = 0
 	while index < len(data):
 	item = data[index]
 	if item in exceptions:
 	modified_item = item + "_EXCEPTION
 	elif item > limit:
 	modified_item = item * 4 (CHANGED)
 	else:
 	modified_item = item / limit
 	filtered_data.append(modified_item)
 	index += 1
 	return filtered_data

   5. def filterData(data, limit, exceptions): Boolean Mutation
	def filterData(data, limit, exceptions):
 	filtered_data = []
 	index = 0
 	while index > len(data): (CHANGED)
 	item = data[index]
 	if item in exceptions:
 	modified_item = item + "_EXCEPTION
 	elif item > limit:
 	modified_item = item * 2
 	else:
 	modified_item = item / limit
	 filtered_data.append(modified_item)
	 index += 1
	 return filtered_data

    6. def filterData(data, limit, exceptions): Arithmetic Mutation
 	filtered_data = []
	 index = 0
 	while index < len(data):
	 item = data[index]
	 if item in exceptions:
	 modified_item = item + "_EXCEPTION
	 elif item > limit:
 	modified_item = item * 2
	 else:
	 modified_item = item / 2 (CHANGED)
 	filtered_data.append(modified_item)
 	index += 1
	 return filtered_data

4C) Testing exceptions includes appending so, the first method variable call mutation would be caught, the second method call mutation would be caught, the third method mutation call would caught, and the fifth method boolean mutation would be caught. 4 Cases in total

Testing the limit, would also apply the previous 4 cases as it includes appending, as well as method number 4 arithmetic mutation would be caught, 5 Cases in total

Testing multiplying the item, would have previous 4 appending, plus method 6 which would be caught, 5 Cases in total

Testing appending data would catch the 4 appending cases, 4 cases in total

limit and multiplying, would test the most cases possible cases, as they use the actual condition checking, and appending checking

4D) Path testing, would be used to continously check through multiple pieces of data, and that multiple different options work in line with each other, while branch testing, would be to isolate a certain feature and rigidly test if it works on its own like just picking to look at the item limit code.

5A)	elif char.isnumeric():  
 	output_str += char * 2

	This piece of code is duplicating number chars, which should be remaining unchanged
5b) See github




